
(function () {
    'use strict';

    const STORAGE_KEY = 'tw_script_manager_state_v2';
    const savedState = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');

    const categories = {
        ataque: '‚öîÔ∏è Ataque',
        defesa: 'üõ°Ô∏è Defesa',
        organizacao: 'üß© Organiza√ß√£o'
    };

    const scripts = [
        {
            name: 'Conversor Defesa POP',
            key: 'conversor',
            icon: 'üõ†Ô∏è',
            tooltip: 'Converter tropas em c√≥digo de defesa BB',
            url: 'https://raw.githubusercontent.com/eleicaotw/TWSetupPro/refs/heads/main/conversor-forum-code-bb-defesa.js',
            categoria: 'organizacao'
        },
        {
            name: 'MP OP Auto',
            key: 'mpop',
            icon: 'üì®',
            tooltip: 'Automatizar envio de MPs em OPs',
            url: 'https://raw.githubusercontent.com/eleicaotw/TWSetupPro/refs/heads/main/mp-op-auto.js',
            categoria: 'organizacao'
        }
    ];

    const style = document.createElement('style');
    style.textContent = `
        #tw_script_manager_painel {
            position: fixed;
            top: 120px;
            left: 20px;
            z-index: 9999;
            background: #f4e4bc;
            padding: 10px;
            border: 2px solid #c4a300;
            font-family: Verdana;
            border-radius: 12px;
            box-shadow: 2px 2px 8px #0006;
            transition: opacity 0.3s ease;
        }
        #tw_script_manager_painel.dark {
            background: #2b2b2b;
            color: #f0f0f0;
            border: 2px solid #888;
        }
        #tw_script_log {
            margin-top: 10px;
            font-size: 11px;
        }
        .tw_script_loaded {
            color: green;
            font-weight: bold;
        }
        .tw_script_category {
            font-weight: bold;
            padding-top: 8px;
        }
        .tw_script_action {
            margin-left: 4px;
            cursor: pointer;
        }
        #tw_script_manager_painel.dragging {
            opacity: 0.7;
        }
    `;
    document.head.appendChild(style);

    const painel = document.createElement('div');
    painel.id = 'tw_script_manager_painel';
    painel.style.display = 'none';
    painel.innerHTML = `
        <b>Menu de Scripts</b><br>
        <div id="lista_scripts" style="margin-top:5px;"></div>
        <div id="tw_script_log" style="color: green;"></div>
    `;
    document.body.appendChild(painel);

    // Engrenagem (bot√£o flutuante)
    const toggleBtn = document.createElement('div');
    toggleBtn.className = 'quest';
    toggleBtn.id = 'tw_toggle_interface';
    toggleBtn.title = 'Abrir Script Manager';
    toggleBtn.style.backgroundImage = 'url(https://dsbr.innogamescdn.com/asset/47657033/graphic/icons/settings.png)';
    toggleBtn.style.cursor = 'pointer';
    document.getElementById('questlog_new')?.appendChild(toggleBtn);

    toggleBtn.onclick = () => {
        painel.style.display = painel.style.display === 'none' ? 'block' : 'none';
    };

    // Mini log
    const log = document.getElementById('tw_script_log');
    const addLog = (msg, color = 'green') => {
        const time = new Date().toLocaleTimeString();
        log.innerHTML = `<span style="color:${color}">[${time}] ${msg}</span>`;
    };

    // Monta lista de scripts com categorias
    const container = document.getElementById('lista_scripts');

    const render = () => {
        container.innerHTML = '';
        const ocultar = false;  // N√£o ocultar desativados para o teste de layout

        Object.keys(categories).forEach(cat => {
            const group = scripts.filter(s => s.categoria === cat);
            if (group.length === 0) return;

            const catDiv = document.createElement('div');
            catDiv.className = 'tw_script_category';
            catDiv.textContent = categories[cat];
            container.appendChild(catDiv);

            group.forEach(script => {
                const ativo = savedState[script.key];
                const div = document.createElement('div');
                div.title = script.tooltip;
                div.innerHTML = `
                    ${script.icon} ${script.name}
                    ${ativo ? '<span class="tw_script_loaded">‚úîÔ∏è</span>' : ''}
                    <input type="checkbox" ${ativo ? 'checked' : ''} data-key="${script.key}" style="margin-left:5px">
                    <span class="tw_script_action" data-reload="${script.key}" title="Recarregar">üîÑ</span>
                `;
                container.appendChild(div);
            });
        });
    };

    const loadScript = (script, force = false) => {
        if (document.getElementById(`tw_script_${script.key}`) && !force) return;
        fetch(script.url)
            .then(res => res.text())
            .then(code => {
                eval(code);
                addLog(`${script.name} carregado`);
            })
            .catch(err => addLog(`Erro ao carregar ${script.name}: ${err}`, 'red'));
    };

    // Eventos
    painel.addEventListener('change', (e) => {
        const el = e.target;
        if (el.id === 'toggle_escuro') {
            painel.classList.toggle('dark', el.checked);
            return;
        }
        if (el.type === 'checkbox' && el.dataset.key) {
            const key = el.dataset.key;
            savedState[key] = el.checked;
            localStorage.setItem(STORAGE_KEY, JSON.stringify(savedState));
            render();
            if (el.checked) {
                const script = scripts.find(s => s.key === key);
                if (script) loadScript(script);
            }
        }
    });

    painel.addEventListener('click', (e) => {
        const el = e.target;
        if (el.dataset.reload) {
            const key = el.dataset.reload;
            const script = scripts.find(s => s.key === key);
            if (script) {
                loadScript(script, true);
            }
        }
    });

    // Reaplicar scripts marcados
    scripts.forEach(s => {
        if (savedState[s.key]) {
            loadScript(s);
        }
    });

    // Arrastar painel
    let offset = null;
    painel.addEventListener('mousedown', e => {
        if (e.target.id === 'tw_script_manager_painel') {
            offset = [e.clientX - painel.offsetLeft, e.clientY - painel.offsetTop];
            painel.classList.add('dragging');
        }
    });
    document.addEventListener('mousemove', e => {
        if (!offset) return;
        painel.style.left = `${e.clientX - offset[0]}px`;
        painel.style.top = `${e.clientY - offset[1]}px`;
    });
    document.addEventListener('mouseup', () => {
        offset = null;
        painel.classList.remove('dragging');
    });

    render();
})();
